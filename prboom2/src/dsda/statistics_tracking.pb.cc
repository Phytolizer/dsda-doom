// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: statistics_tracking.proto

#include "statistics_tracking.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace statistics {
namespace protocol {
constexpr KillStatistic::KillStatistic(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : weapon_id_(uint64_t{0u})
  , count_(uint64_t{0u}){}
struct KillStatisticDefaultTypeInternal {
  constexpr KillStatisticDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KillStatisticDefaultTypeInternal() {}
  union {
    KillStatistic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KillStatisticDefaultTypeInternal _KillStatistic_default_instance_;
constexpr EnemyKillStatistics::EnemyKillStatistics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : per_weapon_()
  , enemy_id_(uint64_t{0u}){}
struct EnemyKillStatisticsDefaultTypeInternal {
  constexpr EnemyKillStatisticsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnemyKillStatisticsDefaultTypeInternal() {}
  union {
    EnemyKillStatistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnemyKillStatisticsDefaultTypeInternal _EnemyKillStatistics_default_instance_;
constexpr KillStatistics::KillStatistics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : per_enemy_(){}
struct KillStatisticsDefaultTypeInternal {
  constexpr KillStatisticsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KillStatisticsDefaultTypeInternal() {}
  union {
    KillStatistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KillStatisticsDefaultTypeInternal _KillStatistics_default_instance_;
constexpr Statistics::Statistics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kill_(nullptr){}
struct StatisticsDefaultTypeInternal {
  constexpr StatisticsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatisticsDefaultTypeInternal() {}
  union {
    Statistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatisticsDefaultTypeInternal _Statistics_default_instance_;
}  // namespace protocol
}  // namespace statistics
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_statistics_5ftracking_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_statistics_5ftracking_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_statistics_5ftracking_2eproto = nullptr;

const uint32_t TableStruct_statistics_5ftracking_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::statistics::protocol::KillStatistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::statistics::protocol::KillStatistic, weapon_id_),
  PROTOBUF_FIELD_OFFSET(::statistics::protocol::KillStatistic, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::statistics::protocol::EnemyKillStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::statistics::protocol::EnemyKillStatistics, enemy_id_),
  PROTOBUF_FIELD_OFFSET(::statistics::protocol::EnemyKillStatistics, per_weapon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::statistics::protocol::KillStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::statistics::protocol::KillStatistics, per_enemy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::statistics::protocol::Statistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::statistics::protocol::Statistics, kill_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::statistics::protocol::KillStatistic)},
  { 8, -1, -1, sizeof(::statistics::protocol::EnemyKillStatistics)},
  { 16, -1, -1, sizeof(::statistics::protocol::KillStatistics)},
  { 23, -1, -1, sizeof(::statistics::protocol::Statistics)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statistics::protocol::_KillStatistic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statistics::protocol::_EnemyKillStatistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statistics::protocol::_KillStatistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::statistics::protocol::_Statistics_default_instance_),
};

const char descriptor_table_protodef_statistics_5ftracking_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031statistics_tracking.proto\022\023statistics."
  "protocol\"1\n\rKillStatistic\022\021\n\tweapon_id\030\001"
  " \001(\004\022\r\n\005count\030\002 \001(\004\"_\n\023EnemyKillStatisti"
  "cs\022\020\n\010enemy_id\030\001 \001(\004\0226\n\nper_weapon\030\002 \003(\013"
  "2\".statistics.protocol.KillStatistic\"M\n\016"
  "KillStatistics\022;\n\tper_enemy\030\001 \003(\0132(.stat"
  "istics.protocol.EnemyKillStatistics\"\?\n\nS"
  "tatistics\0221\n\004kill\030\001 \001(\0132#.statistics.pro"
  "tocol.KillStatisticsb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_statistics_5ftracking_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_statistics_5ftracking_2eproto = {
  false, false, 348, descriptor_table_protodef_statistics_5ftracking_2eproto, "statistics_tracking.proto", 
  &descriptor_table_statistics_5ftracking_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_statistics_5ftracking_2eproto::offsets,
  file_level_metadata_statistics_5ftracking_2eproto, file_level_enum_descriptors_statistics_5ftracking_2eproto, file_level_service_descriptors_statistics_5ftracking_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_statistics_5ftracking_2eproto_getter() {
  return &descriptor_table_statistics_5ftracking_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_statistics_5ftracking_2eproto(&descriptor_table_statistics_5ftracking_2eproto);
namespace statistics {
namespace protocol {

// ===================================================================

class KillStatistic::_Internal {
 public:
};

KillStatistic::KillStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:statistics.protocol.KillStatistic)
}
KillStatistic::KillStatistic(const KillStatistic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&weapon_id_, &from.weapon_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&weapon_id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:statistics.protocol.KillStatistic)
}

inline void KillStatistic::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&weapon_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&weapon_id_)) + sizeof(count_));
}

KillStatistic::~KillStatistic() {
  // @@protoc_insertion_point(destructor:statistics.protocol.KillStatistic)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KillStatistic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KillStatistic::ArenaDtor(void* object) {
  KillStatistic* _this = reinterpret_cast< KillStatistic* >(object);
  (void)_this;
}
void KillStatistic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KillStatistic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KillStatistic::Clear() {
// @@protoc_insertion_point(message_clear_start:statistics.protocol.KillStatistic)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&weapon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&weapon_id_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KillStatistic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 weapon_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          weapon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KillStatistic::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:statistics.protocol.KillStatistic)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 weapon_id = 1;
  if (this->_internal_weapon_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_weapon_id(), target);
  }

  // uint64 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statistics.protocol.KillStatistic)
  return target;
}

size_t KillStatistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statistics.protocol.KillStatistic)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 weapon_id = 1;
  if (this->_internal_weapon_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_weapon_id());
  }

  // uint64 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KillStatistic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KillStatistic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KillStatistic::GetClassData() const { return &_class_data_; }

void KillStatistic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KillStatistic *>(to)->MergeFrom(
      static_cast<const KillStatistic &>(from));
}


void KillStatistic::MergeFrom(const KillStatistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statistics.protocol.KillStatistic)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_weapon_id() != 0) {
    _internal_set_weapon_id(from._internal_weapon_id());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KillStatistic::CopyFrom(const KillStatistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statistics.protocol.KillStatistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillStatistic::IsInitialized() const {
  return true;
}

void KillStatistic::InternalSwap(KillStatistic* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KillStatistic, count_)
      + sizeof(KillStatistic::count_)
      - PROTOBUF_FIELD_OFFSET(KillStatistic, weapon_id_)>(
          reinterpret_cast<char*>(&weapon_id_),
          reinterpret_cast<char*>(&other->weapon_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KillStatistic::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_statistics_5ftracking_2eproto_getter, &descriptor_table_statistics_5ftracking_2eproto_once,
      file_level_metadata_statistics_5ftracking_2eproto[0]);
}

// ===================================================================

class EnemyKillStatistics::_Internal {
 public:
};

EnemyKillStatistics::EnemyKillStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  per_weapon_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:statistics.protocol.EnemyKillStatistics)
}
EnemyKillStatistics::EnemyKillStatistics(const EnemyKillStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      per_weapon_(from.per_weapon_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enemy_id_ = from.enemy_id_;
  // @@protoc_insertion_point(copy_constructor:statistics.protocol.EnemyKillStatistics)
}

inline void EnemyKillStatistics::SharedCtor() {
enemy_id_ = uint64_t{0u};
}

EnemyKillStatistics::~EnemyKillStatistics() {
  // @@protoc_insertion_point(destructor:statistics.protocol.EnemyKillStatistics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EnemyKillStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnemyKillStatistics::ArenaDtor(void* object) {
  EnemyKillStatistics* _this = reinterpret_cast< EnemyKillStatistics* >(object);
  (void)_this;
}
void EnemyKillStatistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnemyKillStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnemyKillStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:statistics.protocol.EnemyKillStatistics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  per_weapon_.Clear();
  enemy_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnemyKillStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 enemy_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          enemy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .statistics.protocol.KillStatistic per_weapon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_per_weapon(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnemyKillStatistics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:statistics.protocol.EnemyKillStatistics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 enemy_id = 1;
  if (this->_internal_enemy_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_enemy_id(), target);
  }

  // repeated .statistics.protocol.KillStatistic per_weapon = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_per_weapon_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_per_weapon(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statistics.protocol.EnemyKillStatistics)
  return target;
}

size_t EnemyKillStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statistics.protocol.EnemyKillStatistics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .statistics.protocol.KillStatistic per_weapon = 2;
  total_size += 1UL * this->_internal_per_weapon_size();
  for (const auto& msg : this->per_weapon_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 enemy_id = 1;
  if (this->_internal_enemy_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_enemy_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnemyKillStatistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnemyKillStatistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnemyKillStatistics::GetClassData() const { return &_class_data_; }

void EnemyKillStatistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EnemyKillStatistics *>(to)->MergeFrom(
      static_cast<const EnemyKillStatistics &>(from));
}


void EnemyKillStatistics::MergeFrom(const EnemyKillStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statistics.protocol.EnemyKillStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  per_weapon_.MergeFrom(from.per_weapon_);
  if (from._internal_enemy_id() != 0) {
    _internal_set_enemy_id(from._internal_enemy_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnemyKillStatistics::CopyFrom(const EnemyKillStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statistics.protocol.EnemyKillStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnemyKillStatistics::IsInitialized() const {
  return true;
}

void EnemyKillStatistics::InternalSwap(EnemyKillStatistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  per_weapon_.InternalSwap(&other->per_weapon_);
  swap(enemy_id_, other->enemy_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnemyKillStatistics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_statistics_5ftracking_2eproto_getter, &descriptor_table_statistics_5ftracking_2eproto_once,
      file_level_metadata_statistics_5ftracking_2eproto[1]);
}

// ===================================================================

class KillStatistics::_Internal {
 public:
};

KillStatistics::KillStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  per_enemy_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:statistics.protocol.KillStatistics)
}
KillStatistics::KillStatistics(const KillStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      per_enemy_(from.per_enemy_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:statistics.protocol.KillStatistics)
}

inline void KillStatistics::SharedCtor() {
}

KillStatistics::~KillStatistics() {
  // @@protoc_insertion_point(destructor:statistics.protocol.KillStatistics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KillStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KillStatistics::ArenaDtor(void* object) {
  KillStatistics* _this = reinterpret_cast< KillStatistics* >(object);
  (void)_this;
}
void KillStatistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KillStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KillStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:statistics.protocol.KillStatistics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  per_enemy_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KillStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .statistics.protocol.EnemyKillStatistics per_enemy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_per_enemy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KillStatistics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:statistics.protocol.KillStatistics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .statistics.protocol.EnemyKillStatistics per_enemy = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_per_enemy_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_per_enemy(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statistics.protocol.KillStatistics)
  return target;
}

size_t KillStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statistics.protocol.KillStatistics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .statistics.protocol.EnemyKillStatistics per_enemy = 1;
  total_size += 1UL * this->_internal_per_enemy_size();
  for (const auto& msg : this->per_enemy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KillStatistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KillStatistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KillStatistics::GetClassData() const { return &_class_data_; }

void KillStatistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KillStatistics *>(to)->MergeFrom(
      static_cast<const KillStatistics &>(from));
}


void KillStatistics::MergeFrom(const KillStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statistics.protocol.KillStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  per_enemy_.MergeFrom(from.per_enemy_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KillStatistics::CopyFrom(const KillStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statistics.protocol.KillStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillStatistics::IsInitialized() const {
  return true;
}

void KillStatistics::InternalSwap(KillStatistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  per_enemy_.InternalSwap(&other->per_enemy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KillStatistics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_statistics_5ftracking_2eproto_getter, &descriptor_table_statistics_5ftracking_2eproto_once,
      file_level_metadata_statistics_5ftracking_2eproto[2]);
}

// ===================================================================

class Statistics::_Internal {
 public:
  static const ::statistics::protocol::KillStatistics& kill(const Statistics* msg);
};

const ::statistics::protocol::KillStatistics&
Statistics::_Internal::kill(const Statistics* msg) {
  return *msg->kill_;
}
Statistics::Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:statistics.protocol.Statistics)
}
Statistics::Statistics(const Statistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kill()) {
    kill_ = new ::statistics::protocol::KillStatistics(*from.kill_);
  } else {
    kill_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:statistics.protocol.Statistics)
}

inline void Statistics::SharedCtor() {
kill_ = nullptr;
}

Statistics::~Statistics() {
  // @@protoc_insertion_point(destructor:statistics.protocol.Statistics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Statistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete kill_;
}

void Statistics::ArenaDtor(void* object) {
  Statistics* _this = reinterpret_cast< Statistics* >(object);
  (void)_this;
}
void Statistics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Statistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:statistics.protocol.Statistics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && kill_ != nullptr) {
    delete kill_;
  }
  kill_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Statistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .statistics.protocol.KillStatistics kill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_kill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Statistics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:statistics.protocol.Statistics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .statistics.protocol.KillStatistics kill = 1;
  if (this->_internal_has_kill()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::kill(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:statistics.protocol.Statistics)
  return target;
}

size_t Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:statistics.protocol.Statistics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .statistics.protocol.KillStatistics kill = 1;
  if (this->_internal_has_kill()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kill_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Statistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Statistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Statistics::GetClassData() const { return &_class_data_; }

void Statistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Statistics *>(to)->MergeFrom(
      static_cast<const Statistics &>(from));
}


void Statistics::MergeFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:statistics.protocol.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_kill()) {
    _internal_mutable_kill()->::statistics::protocol::KillStatistics::MergeFrom(from._internal_kill());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Statistics::CopyFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:statistics.protocol.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistics::IsInitialized() const {
  return true;
}

void Statistics::InternalSwap(Statistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(kill_, other->kill_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Statistics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_statistics_5ftracking_2eproto_getter, &descriptor_table_statistics_5ftracking_2eproto_once,
      file_level_metadata_statistics_5ftracking_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace statistics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::statistics::protocol::KillStatistic* Arena::CreateMaybeMessage< ::statistics::protocol::KillStatistic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statistics::protocol::KillStatistic >(arena);
}
template<> PROTOBUF_NOINLINE ::statistics::protocol::EnemyKillStatistics* Arena::CreateMaybeMessage< ::statistics::protocol::EnemyKillStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statistics::protocol::EnemyKillStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::statistics::protocol::KillStatistics* Arena::CreateMaybeMessage< ::statistics::protocol::KillStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statistics::protocol::KillStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::statistics::protocol::Statistics* Arena::CreateMaybeMessage< ::statistics::protocol::Statistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::statistics::protocol::Statistics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
