// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dsda/statistics_tracking.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dsda_2fstatistics_5ftracking_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dsda_2fstatistics_5ftracking_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dsda_2fstatistics_5ftracking_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dsda_2fstatistics_5ftracking_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dsda_2fstatistics_5ftracking_2eproto;
namespace statistics {
namespace protocol {
class EnemyKillStatistics;
struct EnemyKillStatisticsDefaultTypeInternal;
extern EnemyKillStatisticsDefaultTypeInternal _EnemyKillStatistics_default_instance_;
class KillStatistic;
struct KillStatisticDefaultTypeInternal;
extern KillStatisticDefaultTypeInternal _KillStatistic_default_instance_;
class KillStatistics;
struct KillStatisticsDefaultTypeInternal;
extern KillStatisticsDefaultTypeInternal _KillStatistics_default_instance_;
class Statistics;
struct StatisticsDefaultTypeInternal;
extern StatisticsDefaultTypeInternal _Statistics_default_instance_;
}  // namespace protocol
}  // namespace statistics
PROTOBUF_NAMESPACE_OPEN
template<> ::statistics::protocol::EnemyKillStatistics* Arena::CreateMaybeMessage<::statistics::protocol::EnemyKillStatistics>(Arena*);
template<> ::statistics::protocol::KillStatistic* Arena::CreateMaybeMessage<::statistics::protocol::KillStatistic>(Arena*);
template<> ::statistics::protocol::KillStatistics* Arena::CreateMaybeMessage<::statistics::protocol::KillStatistics>(Arena*);
template<> ::statistics::protocol::Statistics* Arena::CreateMaybeMessage<::statistics::protocol::Statistics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace statistics {
namespace protocol {

// ===================================================================

class KillStatistic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:statistics.protocol.KillStatistic) */ {
 public:
  inline KillStatistic() : KillStatistic(nullptr) {}
  ~KillStatistic() override;
  explicit constexpr KillStatistic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KillStatistic(const KillStatistic& from);
  KillStatistic(KillStatistic&& from) noexcept
    : KillStatistic() {
    *this = ::std::move(from);
  }

  inline KillStatistic& operator=(const KillStatistic& from) {
    CopyFrom(from);
    return *this;
  }
  inline KillStatistic& operator=(KillStatistic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KillStatistic& default_instance() {
    return *internal_default_instance();
  }
  static inline const KillStatistic* internal_default_instance() {
    return reinterpret_cast<const KillStatistic*>(
               &_KillStatistic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KillStatistic& a, KillStatistic& b) {
    a.Swap(&b);
  }
  inline void Swap(KillStatistic* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KillStatistic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KillStatistic* New() const final {
    return new KillStatistic();
  }

  KillStatistic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KillStatistic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KillStatistic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KillStatistic& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KillStatistic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "statistics.protocol.KillStatistic";
  }
  protected:
  explicit KillStatistic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeaponIdFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // uint64 weapon_id = 1;
  void clear_weapon_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 weapon_id() const;
  void set_weapon_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_weapon_id() const;
  void _internal_set_weapon_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:statistics.protocol.KillStatistic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 weapon_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dsda_2fstatistics_5ftracking_2eproto;
};
// -------------------------------------------------------------------

class EnemyKillStatistics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:statistics.protocol.EnemyKillStatistics) */ {
 public:
  inline EnemyKillStatistics() : EnemyKillStatistics(nullptr) {}
  ~EnemyKillStatistics() override;
  explicit constexpr EnemyKillStatistics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnemyKillStatistics(const EnemyKillStatistics& from);
  EnemyKillStatistics(EnemyKillStatistics&& from) noexcept
    : EnemyKillStatistics() {
    *this = ::std::move(from);
  }

  inline EnemyKillStatistics& operator=(const EnemyKillStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnemyKillStatistics& operator=(EnemyKillStatistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnemyKillStatistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnemyKillStatistics* internal_default_instance() {
    return reinterpret_cast<const EnemyKillStatistics*>(
               &_EnemyKillStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EnemyKillStatistics& a, EnemyKillStatistics& b) {
    a.Swap(&b);
  }
  inline void Swap(EnemyKillStatistics* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnemyKillStatistics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnemyKillStatistics* New() const final {
    return new EnemyKillStatistics();
  }

  EnemyKillStatistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnemyKillStatistics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnemyKillStatistics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EnemyKillStatistics& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnemyKillStatistics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "statistics.protocol.EnemyKillStatistics";
  }
  protected:
  explicit EnemyKillStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerWeaponFieldNumber = 2,
    kEnemyIdFieldNumber = 1,
  };
  // repeated .statistics.protocol.KillStatistic per_weapon = 2;
  int per_weapon_size() const;
  private:
  int _internal_per_weapon_size() const;
  public:
  void clear_per_weapon();
  ::statistics::protocol::KillStatistic* mutable_per_weapon(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::statistics::protocol::KillStatistic >*
      mutable_per_weapon();
  private:
  const ::statistics::protocol::KillStatistic& _internal_per_weapon(int index) const;
  ::statistics::protocol::KillStatistic* _internal_add_per_weapon();
  public:
  const ::statistics::protocol::KillStatistic& per_weapon(int index) const;
  ::statistics::protocol::KillStatistic* add_per_weapon();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::statistics::protocol::KillStatistic >&
      per_weapon() const;

  // uint64 enemy_id = 1;
  void clear_enemy_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 enemy_id() const;
  void set_enemy_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_enemy_id() const;
  void _internal_set_enemy_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:statistics.protocol.EnemyKillStatistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::statistics::protocol::KillStatistic > per_weapon_;
  ::PROTOBUF_NAMESPACE_ID::uint64 enemy_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dsda_2fstatistics_5ftracking_2eproto;
};
// -------------------------------------------------------------------

class KillStatistics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:statistics.protocol.KillStatistics) */ {
 public:
  inline KillStatistics() : KillStatistics(nullptr) {}
  ~KillStatistics() override;
  explicit constexpr KillStatistics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KillStatistics(const KillStatistics& from);
  KillStatistics(KillStatistics&& from) noexcept
    : KillStatistics() {
    *this = ::std::move(from);
  }

  inline KillStatistics& operator=(const KillStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline KillStatistics& operator=(KillStatistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KillStatistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const KillStatistics* internal_default_instance() {
    return reinterpret_cast<const KillStatistics*>(
               &_KillStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KillStatistics& a, KillStatistics& b) {
    a.Swap(&b);
  }
  inline void Swap(KillStatistics* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KillStatistics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KillStatistics* New() const final {
    return new KillStatistics();
  }

  KillStatistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KillStatistics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KillStatistics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KillStatistics& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KillStatistics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "statistics.protocol.KillStatistics";
  }
  protected:
  explicit KillStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerEnemyFieldNumber = 1,
  };
  // repeated .statistics.protocol.EnemyKillStatistics per_enemy = 1;
  int per_enemy_size() const;
  private:
  int _internal_per_enemy_size() const;
  public:
  void clear_per_enemy();
  ::statistics::protocol::EnemyKillStatistics* mutable_per_enemy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::statistics::protocol::EnemyKillStatistics >*
      mutable_per_enemy();
  private:
  const ::statistics::protocol::EnemyKillStatistics& _internal_per_enemy(int index) const;
  ::statistics::protocol::EnemyKillStatistics* _internal_add_per_enemy();
  public:
  const ::statistics::protocol::EnemyKillStatistics& per_enemy(int index) const;
  ::statistics::protocol::EnemyKillStatistics* add_per_enemy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::statistics::protocol::EnemyKillStatistics >&
      per_enemy() const;

  // @@protoc_insertion_point(class_scope:statistics.protocol.KillStatistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::statistics::protocol::EnemyKillStatistics > per_enemy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dsda_2fstatistics_5ftracking_2eproto;
};
// -------------------------------------------------------------------

class Statistics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:statistics.protocol.Statistics) */ {
 public:
  inline Statistics() : Statistics(nullptr) {}
  ~Statistics() override;
  explicit constexpr Statistics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Statistics(const Statistics& from);
  Statistics(Statistics&& from) noexcept
    : Statistics() {
    *this = ::std::move(from);
  }

  inline Statistics& operator=(const Statistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Statistics& operator=(Statistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Statistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const Statistics* internal_default_instance() {
    return reinterpret_cast<const Statistics*>(
               &_Statistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Statistics& a, Statistics& b) {
    a.Swap(&b);
  }
  inline void Swap(Statistics* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Statistics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Statistics* New() const final {
    return new Statistics();
  }

  Statistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Statistics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Statistics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Statistics& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Statistics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "statistics.protocol.Statistics";
  }
  protected:
  explicit Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKillFieldNumber = 1,
  };
  // .statistics.protocol.KillStatistics kill = 1;
  bool has_kill() const;
  private:
  bool _internal_has_kill() const;
  public:
  void clear_kill();
  const ::statistics::protocol::KillStatistics& kill() const;
  PROTOBUF_MUST_USE_RESULT ::statistics::protocol::KillStatistics* release_kill();
  ::statistics::protocol::KillStatistics* mutable_kill();
  void set_allocated_kill(::statistics::protocol::KillStatistics* kill);
  private:
  const ::statistics::protocol::KillStatistics& _internal_kill() const;
  ::statistics::protocol::KillStatistics* _internal_mutable_kill();
  public:
  void unsafe_arena_set_allocated_kill(
      ::statistics::protocol::KillStatistics* kill);
  ::statistics::protocol::KillStatistics* unsafe_arena_release_kill();

  // @@protoc_insertion_point(class_scope:statistics.protocol.Statistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::statistics::protocol::KillStatistics* kill_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dsda_2fstatistics_5ftracking_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KillStatistic

// uint64 weapon_id = 1;
inline void KillStatistic::clear_weapon_id() {
  weapon_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KillStatistic::_internal_weapon_id() const {
  return weapon_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KillStatistic::weapon_id() const {
  // @@protoc_insertion_point(field_get:statistics.protocol.KillStatistic.weapon_id)
  return _internal_weapon_id();
}
inline void KillStatistic::_internal_set_weapon_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  weapon_id_ = value;
}
inline void KillStatistic::set_weapon_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_weapon_id(value);
  // @@protoc_insertion_point(field_set:statistics.protocol.KillStatistic.weapon_id)
}

// uint64 count = 2;
inline void KillStatistic::clear_count() {
  count_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KillStatistic::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KillStatistic::count() const {
  // @@protoc_insertion_point(field_get:statistics.protocol.KillStatistic.count)
  return _internal_count();
}
inline void KillStatistic::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
}
inline void KillStatistic::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:statistics.protocol.KillStatistic.count)
}

// -------------------------------------------------------------------

// EnemyKillStatistics

// uint64 enemy_id = 1;
inline void EnemyKillStatistics::clear_enemy_id() {
  enemy_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnemyKillStatistics::_internal_enemy_id() const {
  return enemy_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EnemyKillStatistics::enemy_id() const {
  // @@protoc_insertion_point(field_get:statistics.protocol.EnemyKillStatistics.enemy_id)
  return _internal_enemy_id();
}
inline void EnemyKillStatistics::_internal_set_enemy_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  enemy_id_ = value;
}
inline void EnemyKillStatistics::set_enemy_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_enemy_id(value);
  // @@protoc_insertion_point(field_set:statistics.protocol.EnemyKillStatistics.enemy_id)
}

// repeated .statistics.protocol.KillStatistic per_weapon = 2;
inline int EnemyKillStatistics::_internal_per_weapon_size() const {
  return per_weapon_.size();
}
inline int EnemyKillStatistics::per_weapon_size() const {
  return _internal_per_weapon_size();
}
inline void EnemyKillStatistics::clear_per_weapon() {
  per_weapon_.Clear();
}
inline ::statistics::protocol::KillStatistic* EnemyKillStatistics::mutable_per_weapon(int index) {
  // @@protoc_insertion_point(field_mutable:statistics.protocol.EnemyKillStatistics.per_weapon)
  return per_weapon_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::statistics::protocol::KillStatistic >*
EnemyKillStatistics::mutable_per_weapon() {
  // @@protoc_insertion_point(field_mutable_list:statistics.protocol.EnemyKillStatistics.per_weapon)
  return &per_weapon_;
}
inline const ::statistics::protocol::KillStatistic& EnemyKillStatistics::_internal_per_weapon(int index) const {
  return per_weapon_.Get(index);
}
inline const ::statistics::protocol::KillStatistic& EnemyKillStatistics::per_weapon(int index) const {
  // @@protoc_insertion_point(field_get:statistics.protocol.EnemyKillStatistics.per_weapon)
  return _internal_per_weapon(index);
}
inline ::statistics::protocol::KillStatistic* EnemyKillStatistics::_internal_add_per_weapon() {
  return per_weapon_.Add();
}
inline ::statistics::protocol::KillStatistic* EnemyKillStatistics::add_per_weapon() {
  ::statistics::protocol::KillStatistic* _add = _internal_add_per_weapon();
  // @@protoc_insertion_point(field_add:statistics.protocol.EnemyKillStatistics.per_weapon)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::statistics::protocol::KillStatistic >&
EnemyKillStatistics::per_weapon() const {
  // @@protoc_insertion_point(field_list:statistics.protocol.EnemyKillStatistics.per_weapon)
  return per_weapon_;
}

// -------------------------------------------------------------------

// KillStatistics

// repeated .statistics.protocol.EnemyKillStatistics per_enemy = 1;
inline int KillStatistics::_internal_per_enemy_size() const {
  return per_enemy_.size();
}
inline int KillStatistics::per_enemy_size() const {
  return _internal_per_enemy_size();
}
inline void KillStatistics::clear_per_enemy() {
  per_enemy_.Clear();
}
inline ::statistics::protocol::EnemyKillStatistics* KillStatistics::mutable_per_enemy(int index) {
  // @@protoc_insertion_point(field_mutable:statistics.protocol.KillStatistics.per_enemy)
  return per_enemy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::statistics::protocol::EnemyKillStatistics >*
KillStatistics::mutable_per_enemy() {
  // @@protoc_insertion_point(field_mutable_list:statistics.protocol.KillStatistics.per_enemy)
  return &per_enemy_;
}
inline const ::statistics::protocol::EnemyKillStatistics& KillStatistics::_internal_per_enemy(int index) const {
  return per_enemy_.Get(index);
}
inline const ::statistics::protocol::EnemyKillStatistics& KillStatistics::per_enemy(int index) const {
  // @@protoc_insertion_point(field_get:statistics.protocol.KillStatistics.per_enemy)
  return _internal_per_enemy(index);
}
inline ::statistics::protocol::EnemyKillStatistics* KillStatistics::_internal_add_per_enemy() {
  return per_enemy_.Add();
}
inline ::statistics::protocol::EnemyKillStatistics* KillStatistics::add_per_enemy() {
  ::statistics::protocol::EnemyKillStatistics* _add = _internal_add_per_enemy();
  // @@protoc_insertion_point(field_add:statistics.protocol.KillStatistics.per_enemy)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::statistics::protocol::EnemyKillStatistics >&
KillStatistics::per_enemy() const {
  // @@protoc_insertion_point(field_list:statistics.protocol.KillStatistics.per_enemy)
  return per_enemy_;
}

// -------------------------------------------------------------------

// Statistics

// .statistics.protocol.KillStatistics kill = 1;
inline bool Statistics::_internal_has_kill() const {
  return this != internal_default_instance() && kill_ != nullptr;
}
inline bool Statistics::has_kill() const {
  return _internal_has_kill();
}
inline void Statistics::clear_kill() {
  if (GetArenaForAllocation() == nullptr && kill_ != nullptr) {
    delete kill_;
  }
  kill_ = nullptr;
}
inline const ::statistics::protocol::KillStatistics& Statistics::_internal_kill() const {
  const ::statistics::protocol::KillStatistics* p = kill_;
  return p != nullptr ? *p : reinterpret_cast<const ::statistics::protocol::KillStatistics&>(
      ::statistics::protocol::_KillStatistics_default_instance_);
}
inline const ::statistics::protocol::KillStatistics& Statistics::kill() const {
  // @@protoc_insertion_point(field_get:statistics.protocol.Statistics.kill)
  return _internal_kill();
}
inline void Statistics::unsafe_arena_set_allocated_kill(
    ::statistics::protocol::KillStatistics* kill) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kill_);
  }
  kill_ = kill;
  if (kill) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:statistics.protocol.Statistics.kill)
}
inline ::statistics::protocol::KillStatistics* Statistics::release_kill() {
  
  ::statistics::protocol::KillStatistics* temp = kill_;
  kill_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::statistics::protocol::KillStatistics* Statistics::unsafe_arena_release_kill() {
  // @@protoc_insertion_point(field_release:statistics.protocol.Statistics.kill)
  
  ::statistics::protocol::KillStatistics* temp = kill_;
  kill_ = nullptr;
  return temp;
}
inline ::statistics::protocol::KillStatistics* Statistics::_internal_mutable_kill() {
  
  if (kill_ == nullptr) {
    auto* p = CreateMaybeMessage<::statistics::protocol::KillStatistics>(GetArenaForAllocation());
    kill_ = p;
  }
  return kill_;
}
inline ::statistics::protocol::KillStatistics* Statistics::mutable_kill() {
  ::statistics::protocol::KillStatistics* _msg = _internal_mutable_kill();
  // @@protoc_insertion_point(field_mutable:statistics.protocol.Statistics.kill)
  return _msg;
}
inline void Statistics::set_allocated_kill(::statistics::protocol::KillStatistics* kill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete kill_;
  }
  if (kill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::statistics::protocol::KillStatistics>::GetOwningArena(kill);
    if (message_arena != submessage_arena) {
      kill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kill, submessage_arena);
    }
    
  } else {
    
  }
  kill_ = kill;
  // @@protoc_insertion_point(field_set_allocated:statistics.protocol.Statistics.kill)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace statistics

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dsda_2fstatistics_5ftracking_2eproto
